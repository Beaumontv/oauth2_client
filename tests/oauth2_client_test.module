<?php
/**
 * @file
 * Testing OAuth2 client functionality.
 */

/**
 * Implements hook_oauth2_clients().
 */
function oauth2_client_test_oauth2_clients() {
  $oauth2_clients = array();

  $common = array(
    'token_endpoint' => url('oauth2/token', array('absolute' => TRUE)),
    'client_id' => 'client1',
    'client_secret' => 'secret1',
  );

  // For testing client-credentials flow.
  $oauth2_clients['client-credentials'] = array(
    'auth_flow' => 'client-credentials',
  ) + $common;

  // For testing user-password flow.
  $oauth2_clients['user-password'] = array(
    'auth_flow' => 'user-password',
    'username' => 'user1',
    'password' => 'pass1',
  ) + $common;

  // For testing server-side flow.
  $oauth2_clients['server-side'] = array(
    'auth_flow' => 'server-side',
    'authorization_endpoint' => url('oauth2/authorize', array('absolute' => TRUE)),
    'redirect_uri' => url('oauth2/authorized',  array('absolute' => TRUE)),
    'scope' => 'scope1 scope2',
  ) + $common;

  // Test error handling.

  $oauth2_clients['wrong-client-id'] = array(
    'token_endpoint' => url('oauth2/token', array('absolute' => TRUE)),
    'client_id' => 'client_1',
    'client_secret' => 'secret1',
    'auth_flow' => 'client-credentials',
  );

  $oauth2_clients['wrong-client-secret'] = array(
    'token_endpoint' => url('oauth2/token', array('absolute' => TRUE)),
    'client_id' => 'client1',
    'client_secret' => 'secret_1',
    'auth_flow' => 'client-credentials',
  );

  $oauth2_clients['wrong-token-endpoint'] = array(
    'token_endpoint' => url('oauth2/token_1', array('absolute' => TRUE)),
    'client_id' => 'client1',
    'client_secret' => 'secret1',
    'auth_flow' => 'client-credentials',
  );

  $oauth2_clients['wrong-auth-flow'] = array(
    'auth_flow' => 'client-credentials-1',
  ) + $common;

  $oauth2_clients['wrong-username'] = array(
    'auth_flow' => 'user-password',
    'username' => 'user_1',
    'password' => 'pass1',
  ) + $common;

  $oauth2_clients['wrong-password'] = array(
    'auth_flow' => 'user-password',
    'username' => 'user1',
    'password' => 'pass_1',
  ) + $common;

  $oauth2_clients['wrong-scope'] = array(
    'token_endpoint' => url('oauth2/token', array('absolute' => TRUE)),
    'client_id' => 'client1',
    'client_secret' => 'secret1',
    'auth_flow' => 'client-credentials',
    'scope' => 'scope1 scope2 scope3',
  ) + $common;

  $oauth2_clients['wrong-authorization-endpoint'] = array(
    'auth_flow' => 'server-side',
    'authorization_endpoint' => url('oauth2/authorize_1', array('absolute' => TRUE)),
    'redirect_uri' => url('oauth2/authorized',  array('absolute' => TRUE)),
  ) + $common;

  $oauth2_clients['wrong-redirect-uri'] = array(
    'auth_flow' => 'server-side',
    'authorization_endpoint' => url('oauth2/authorize', array('absolute' => TRUE)),
    'redirect_uri' => url('oauth2/authorized_1',  array('absolute' => TRUE)),
  ) + $common;

  return $oauth2_clients;
}

/**
 * Implements hook_menu().
 */
function oauth2_client_test_menu() {
  $items = array();
  $items['oauth2/test'] = array(
    'page callback' => 'oauth2_client_test_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Trying test clients.
 *
 * Call them by opening in browser:
 *   - $base_url/oauth2/test/client-credentials
 *   - $base_url/oauth2/test/user-password
 *   - $base_url/oauth2/test/server-side
 *   - $base_url/oauth2/test/wrong-client-id
 *   - $base_url/oauth2/test/wrong-client-secret
 *   - $base_url/oauth2/test/wrong-token-endpoint
 *   - $base_url/oauth2/test/wrong-auth-flow
 *   - $base_url/oauth2/test/wrong-username
 *   - $base_url/oauth2/test/wrong-password
 *   - $base_url/oauth2/test/wrong-scope
 *   - $base_url/oauth2/test/wrong-authorization-endpoint
 *   - $base_url/oauth2/test/wrong-redirect-uri
 */
function oauth2_client_test_callback($client_name) {
  try {
    // Get an access token and output it.
    $oauth2_client = oauth2_client_load($client_name);
    $access_token = $oauth2_client->getAccessToken();
    print "access_token: $access_token";
  }
  catch (Exception $e) {
    print $e->getMessage();
  }
}
